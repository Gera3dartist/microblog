# singleton
class Singleton(object):
	def __new__(cls, *a, **k):
		if not hasattr(cls, '_inst'):
			cls._inst = super(Singleton, cls).__new__(cls, *a, **k)
		return cls._inst
# borg
class Borg(object):
	_shared_state = {}
	def __new__(cls, *a, **k):
		obj = super(Borg, cls).__new__(cls, *a, **k)
		obj.__dict__ = cls._shared_state
		return obj


import unittest
class TestSingleTon(unittest.TestCase):

	def setUp(self):
		class Sg1(Singleton):
			pass
		self.inst1 = Sg1()
		self.inst2 = Sg1()

	def test_check_ids_equals(self):
		"check id of two instances are equals"
		self.assertEquals(self.inst1, self.inst2, \
			msg ="Id's not equals")


if __name__ == "__main__":
	unittest.main(verbosity=2)